AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  APIGateway with IAM authentication crossaccount sample.
  This template is api gateway side account.

Parameters:
  AnotherAccountID: 
    Description: lambda side account id.
    Type: String
    Default: '999999999999'
  RoleName:
    Description: IAM Role name which excute API Gateway.
    Type: String
    Default: APIGatewayIAMRole

Globals:
  Api:
    AccessLogSetting:
      DestinationArn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/apigateway/rest/apigateway-sample
      Format: '{
            "requestId":"$context.requestId", 
            "ip": "$context.identity.sourceIp",
            "caller":"$context.identity.caller",
            "user":"$context.identity.user",
            "requestTime":"$context.requestTime",
            "httpMethod":"$context.httpMethod",
            "resourcePath":"$context.resourcePath",
            "status":"$context.status",
            "protocol":"$context.protocol",
            "responseLength":"$context.responseLength",
            "integrationErrorMessage":"$context.integrationErrorMessage",
            "error.message":"$context.error.message",
            "error.responseType":"$context.error.responseType",
          }'
    MethodSettings:
      - CacheDataEncrypted: false
        CachingEnabled: false
        DataTraceEnabled: true
        HttpMethod: '*'
        LoggingLevel: 'INFO'
        MetricsEnabled: true
        ResourcePath: '/*'
      

Resources:
  APIGatewayIAMAuthorization:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "apigateway-iam-authorization"
      StageName: dev
      OpenApiVersion: 3.0.2
      Auth:
        DefaultAuthorizer: AWS_IAM
  lambdaAttachedAPIGateway:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "lambda-attached-apigateway"
      CodeUri: lambda_attached_apigateway/
      Handler: app.lambda_handler
      Runtime: python3.8
      Timeout: 29
      Events:
        Event:
          Type: Api
          Properties:
            Path: apigateway/lambda_attached_apigateway
            Method: post
            RestApiId:
              Ref: APIGatewayIAMAuthorization

  APIGatewayRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Ref RoleName
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
      Policies:
        - PolicyName: "authorizerLambdaInvokeAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                  - execute-api:Invoke
                Resource: "*"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowApiGatewayServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AnotherAccountID}:role/FromLambdaRole"

Outputs:
  APIGatewayEndpointRandomString:
    Description: Setting this value at another account.
    Value: !Ref  APIGatewayIAMAuthorization